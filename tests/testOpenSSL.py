# coding=utf-8

from unittest.case import TestCase
from ellipticcurve.ecdsa import Ecdsa
from ellipticcurve.privateKey import PrivateKey
from ellipticcurve.publicKey import PublicKey
from ellipticcurve.signature import Signature


class OpensslTest(TestCase):

    def testAssign(self):
        # Generated by: openssl ecparam -name secp256k1 -genkey -out privateKey.pem
        privateKeyPem = open("privateKey.pem").read()

        privateKey = PrivateKey.fromPem(privateKeyPem)

        message = open("message.txt").read()

        signature = Ecdsa.sign(message=message, privateKey=privateKey)

        publicKey = privateKey.publicKey()

        self.assertTrue(Ecdsa.verify(message=message, signature=signature, publicKey=publicKey))

    def testVerifySignature(self):
        # openssl ec -in privateKey.pem -pubout -out publicKey.pem
        publicKeyPem = open("publicKey.pem").read()
        # openssl dgst -sha256 -sign privateKey.pem -out signature.binary message.txt
        signatureBin = open("signature.binary").read()

        message = open("message.txt").read()

        publicKey = PublicKey.fromPem(publicKeyPem)

        signature = Signature.fromDer(string=signatureBin)

        self.assertTrue(Ecdsa.verify(message=message, signature=signature, publicKey=publicKey))